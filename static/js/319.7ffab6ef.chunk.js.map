{"version":3,"file":"static/js/319.7ffab6ef.chunk.js","mappings":"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","sources":["components/AddForm/AddForm.styled.jsx","components/AddForm/AddForm.jsx","components/ContactsItem/ContactsItem.styled.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Loading.jsx","components/UserContacts/UserContacts.styled.jsx","components/UserContacts/UserContacts.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const PhoneForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 480px;\n  margin: 0 auto;\n`;\n\nexport const ContactsTitle = styled.h1`\n  color: #e84a5f;\n\n  font-family: Manjari;\n  font-size: 36px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Input = styled(Field)`\n  width: 480px;\n  height: 32px;\n  border-radius: 4px;\n  border: 1px solid #635b5b;\n  color: #635b5b;\n\n  font-family: Overpass;\n  font-size: 20px;\n  font-weight: 300;\n`;\n\nexport const ErrorNotif = styled(ErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ContactsBtn = styled.button`\n  border-radius: 4px;\n  background: #e84a5f;\n  width: 200px;\n  height: 32px;\n  color: #fff;\n  border: none;\n\n  font-family: Overpass;\n  font-size: 20px;\n\n  font-weight: 400;\n  margin: 0 auto;\n  margin-top: 32px;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  ContactsBtn,\n  ContactsTitle,\n  ErrorNotif,\n  Input,\n  Label,\n  PhoneForm,\n} from './AddForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst NameValid = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst NumberValid =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst FormSchena = Yup.object().shape({\n  name: Yup.string('Enter your name')\n    .min(3, 'Too Short!')\n    .matches(\n      NameValid,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: Yup.string()\n    .matches(\n      NumberValid,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .min(12, 'Phone number must be at least 12 digits')\n    .required('Phone number is required'),\n});\n\nexport const AddForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }) => {\n    const contact = {\n      name,\n      number,\n    };\n    const hasName = contacts.items.some(\n      cont => cont.name.toLowerCase() === contact.name.toLowerCase()\n    );\n    if (hasName) return window.alert(`${contact.name} is allready in contacts`);\n\n    dispatch(addContact(contact));\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={FormSchena}\n        onSubmit={(values, actions) => {\n          handleSubmit(values);\n          actions.resetForm();\n        }}\n      >\n        <PhoneForm>\n          <ContactsTitle>Your contacts</ContactsTitle>\n          <Label>\n            Name\n            <Input type=\"text\" name=\"name\" />\n            <ErrorNotif name=\"name\" component=\"span\" />\n          </Label>\n          <Label>\n            Number\n            <Input type=\"tel\" name=\"number\" />\n            <ErrorNotif name=\"number\" component=\"span\" />\n          </Label>\n          <ContactsBtn type=\"submit\">Add contact</ContactsBtn>\n        </PhoneForm>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #b6b1b1;\n  padding-top: 16px;\n  padding-bottom: 16px;\n`;\n\nexport const ContactText = styled.p`\n  flex: 1;\n  color: #646b74;\n`;\n\nexport const DeleteBtn = styled.button`\n  color: #e84a5f;\n  background-color: #ffffff;\n  border: 0.5px solid #e84a5f;\n  border-radius: 6px;\n  padding: 4px 8px;\n\n  font-family: Overpass;\n  font-size: 16px;\n  font-weight: 400;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Contact, ContactText, DeleteBtn } from './ContactsItem.styled';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactsItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Contact key={contact.id}>\n      <ContactText>{contact.name}</ContactText>\n      <ContactText>{contact.number}</ContactText>\n      <DeleteBtn\n        onClick={() => dispatch(deleteContact(contact.id))}\n        type=\"button\"\n      >\n        Delete\n      </DeleteBtn>\n    </Contact>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n","import { ContactsItem } from 'components/ContactsItem/ContactsItem';\nimport { List } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(item => (\n        <li>\n          <ContactsItem contact={item} />\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  font-size: 18px;\n  color: #646b74;\n`;\n\nexport const FilterInput = styled.input`\n  color: #635b5b;\n  border-radius: 4px;\n  border: 1px solid #635b5b;\n\n  font-family: Overpass;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 300;\n  line-height: normal;\n  width: 208px;\n  height: 24px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { changeValue } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        value={filter}\n        onChange={evt => dispatch(changeValue(evt.target.value))}\n        type=\"text\"\n      />\n    </FilterLabel>\n  );\n};\n","export const Loading = () => {\n  return <div>Loading...</div>;\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 480px;\n  margin: 0 auto;\n  padding-top: 24px;\n`;\n","import { AddForm } from 'components/AddForm/AddForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loading } from 'components/Loading';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { Container } from './UserContacts.styled';\n\nexport const UserContacts = () => {\n  const contacts = useSelector(selectContacts);\n  return (\n    <div>\n      <AddForm />\n      <Container>\n        {contacts.items.length !== 0 && (\n          <>\n            <Filter />\n            {contacts.isLoading && !contacts.error && <Loading />}\n            <ContactsList />\n          </>\n        )}\n      </Container>\n    </div>\n  );\n};\n","import { UserContacts } from 'components/UserContacts/UserContacts';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <UserContacts />\n    </div>\n  );\n}\n"],"names":["PhoneForm","styled","Form","_templateObject","_taggedTemplateLiteral","ContactsTitle","_templateObject2","Label","_templateObject3","Input","Field","_templateObject4","ErrorNotif","ErrorMessage","_templateObject5","ContactsBtn","_templateObject6","FormSchena","Yup","shape","name","min","matches","required","number","AddForm","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","_ref","contact","items","some","cont","toLowerCase","window","alert","concat","addContact","handleSubmit","resetForm","_jsxs","type","component","Contact","ContactText","DeleteBtn","ContactsItem","onClick","deleteContact","id","List","ContactsList","visibleContacts","selectVisibleContacts","map","item","FilterLabel","FilterInput","Filter","filter","selectFilter","value","onChange","evt","changeValue","target","Loading","Container","UserContacts","length","_Fragment","isLoading","error","Contacts","useEffect","fetchContacts"],"sourceRoot":""}